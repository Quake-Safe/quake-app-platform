generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum UserProfileRole {
  NORMAL
  GOVERNMENT_AGENCY
}

// The user profile model is only capable of posting comments and reactions.
// To the articles and stories of each government agency profile.
model UserProfile {
  id String @id @default(uuid())

  /// The user's Supabase ID
  supabaseId String @unique

  username String @unique
  email    String @unique

  avatarUrl String?

  firstName  String @default("")
  lastName   String @default("")
  middleName String @default("")

  role UserProfileRole @default(NORMAL)

  // Government Agency Details
  shortName String? @unique
  fullName  String? @unique

  stories PostStory[]
  posts   Post[]

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  comments  PostComment[]
  likes     PostLikes[]

  @@map("user_profiles")
}

// A post that is similar to a story in facebook/instagram.
model PostStory {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  title String

  // This can be a markdown or a html
  content String

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id])

  // The media that is attached to the story (image/video)
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String @unique

  @@map("post_story")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  // The image/video url which we can use to display the image/video
  publicUrl String

  // The original file name without being processed
  originalFileName String

  // The file name that has been processed
  fileName String

  // The type of the media (image/video)
  type MediaType @default(IMAGE)

  story PostStory?
  post  Post?

  @@map("media")
}

model Post {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft delete
  deletedAt DateTime?

  title String

  // This can be a markdown or a html
  content String

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id])

  // The media that is attached to the story (image/video)
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String @unique

  /// The total number of comments
  totalComments Int           @default(0)
  comments      PostComment[]

  // The total number of likes that post has this is used to display the total number of likes
  // a
  totalLikes Int         @default(0)
  likes      PostLikes[]

  @@map("posts")
}

model PostComment {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft delete
  deletedAt DateTime?

  content String

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  @@map("post_comments")
}

model PostLikes {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft delete
  deletedAt DateTime?

  authorId String
  author   UserProfile @relation(fields: [authorId], references: [id])

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  @@map("post_likes")
}
